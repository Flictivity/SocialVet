@using SoVet.BlazorWebClient.Extensions
@using Radzen.Blazor
@using SoVet.BlazorWebClient.Shared.Windows
@using DialogOptions = MudBlazor.DialogOptions
@using DialogPosition = MudBlazor.DialogPosition
@using Radzen
@using Variant = MudBlazor.Variant

@inject IRegistrationService RegistrationService;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<MudText>

</MudText>
<MudGrid>
    <MudItem xs="12" lg="8" md="8">
        <MudGrid>
            <MudItem xs="12" md="12" lg="12">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h4">120</MudText>
                        <MudText Typo="Typo.h6">Приемов в этом месяце</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem lg="8" md="8" xs="12">
                <MudCard>
                    <MudCardHeader Class="text-center">
                        <MudText Typo="Typo.h6" Class="mr-3">Всего пациентов</MudText>
                        <MudDatePicker Variant="Variant.Outlined"/>
                    </MudCardHeader>
                    <MudCardContent>
                        <RadzenChart Style="min-height: 65vh">
                            <RadzenLineSeries Data="@_facilitiesIncome" CategoryProperty="Category" Title="@(DateTime.Today.Year.ToString())" LineType="LineType.Solid" ValueProperty="Count">
                                <RadzenMarkers MarkerType="MarkerType.Circle"/>
                                <RadzenSeriesDataLabels Visible="false"/>
                            </RadzenLineSeries>
                            <RadzenValueAxis>
                                <RadzenGridLines Visible="true"/>
                            </RadzenValueAxis>
                        </RadzenChart>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem lg="4" md="4" xs="12">
                <MudCard>
                    <MudCardHeader Class="text-center">
                        <MudText Typo="Typo.h6" Class="text-center">Возрасты</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <RadzenChart>
                            <RadzenChart Style="min-height: 37.7vh">
                                <RadzenLegend Position="LegendPosition.Bottom"></RadzenLegend>
                                <RadzenDonutSeries Data="@_appointmentsStatusesInfo" CategoryProperty="Category" ValueProperty="Count" TotalAngle="360" StartAngle="180">
                                    <TooltipTemplate Context="data">
                                        @data.Category
                                        @data.Count
                                    </TooltipTemplate>
                                    <ChildContent>
                                        <RadzenSeriesDataLabels Visible="true"/>
                                    </ChildContent>
                                </RadzenDonutSeries>
                            </RadzenChart>
                        </RadzenChart>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12" md="4" lg="4">
        <MudCard>
            <MudCardContent>
                <RadzenScheduler @ref=@_scheduler TItem="Registration" Data=@_registrations StartProperty="StartTime" EndProperty="StartTime"
                                 TextProperty="ScheduleText" SelectedIndex="0" TodayText="Сегодня" AppointmentSelect="RegistrationSelect" Style="height: 87.7vh"
                                 AppointmentRender="@OnAppointmentRender">
                    <RadzenDayView StartTime="@StartTime" EndTime="@EndTime" TimeFormat="H:mm" Text="День"/>
                </RadzenScheduler>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>


@code {

    class DataItem
    {
        public string Category { get; set; }
        public double Count { get; set; }
    }

    DataItem[] _appointmentsStatusesInfo =
    {
        new()
        {
            Category = "0-1 лет",
            Count = 4
        },
        new()
        {
            Category = "1-3 года",
            Count = 6
        },
        new()
        {
            Category = "3-8 лет",
            Count = 2
        },
        new()
        {
            Category = "8+ лет",
            Count = 1
        }
    };

    DataItem[] _appointmentsPickInfo =
    {
        new()
        {
            Category = DateTime.Today.ToString("d"),
            Count = 2
        }
    };

    DataItem[] _facilitiesIncome =
    {
        new() { Category = "Январь", Count = 1 },
        new() { Category = "Февраль", Count = 2 },
        new() { Category = "Март", Count = 3 },
        new() { Category = "Апрель", Count = 5 },
        new() { Category = "Май", Count = 10 },
        new() { Category = "Июнь", Count = 6 },
        new() { Category = "Июль", Count = 3 },
        new() { Category = "Август", Count = 10 },
        new() { Category = "Сентябрь", Count = 5 },
    };

    RadzenScheduler<Registration> _scheduler = null!;
    private List<Registration>? _registrations = new();

    public static TimeSpan StartTime = new(8, 0, 0);
    public static TimeSpan EndTime = new(23, 0, 0);


    protected override async Task OnInitializedAsync()
    {
        var userIdentity = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var employeeId = int.Parse(userIdentity.Claims.First(x => x.Type == UserClaims.EmployeeId).Value);

        _registrations = userIdentity.IsInRole(Role.Administrator) 
            ? await RegistrationService.GetRegistrations(null) 
            : await RegistrationService.GetRegistrations(employeeId);
        
        await base.OnInitializedAsync();
    }
    
    private async Task RegistrationSelect(SchedulerAppointmentSelectEventArgs<Registration> args)
    {
        var options = new DialogOptions
        {
            Position = DialogPosition.Center, CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true
        };

        var parameters = new DialogParameters
        {
            { "Model", args.Data }
        };

        var dialog = await DialogService.ShowAsync<CreateAppointmentWindow>("Прием", parameters, options);
        var result = await dialog.Result;
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Registration> args)
    {
        args.Attributes["style"] = "background: #3F51B5";
    }
}