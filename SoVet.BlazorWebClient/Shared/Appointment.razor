@using SoVet.BlazorWebClient.Extensions
@inject IDialogService DialogService;
@inject IAppointmentService AppointmentService;
@inject ISnackbar Snackbar;
@inject IDiagnosisService DiagnosisService;
@inject IJSRuntime JSR;

@if (!_isLoaded)
{
    <MudProgressLinear/>
    return;
}

@if (_model is null)
{
    <MudAlert Severity="Severity.Info" Class="mt-3">Не удалось загрузить информацию о приеме...</MudAlert>
    return;
}

<MudCard Class="pa-4">
    <MudTabs Rounded="true">
        <MudTabPanel Text="Лист осмотра" Icon="@Icons.Material.Filled.ViewList">
            <MudSelect T="int" Label="Статус" Variant="Variant.Outlined" Class="pa-0 mt-3" @bind-Value="_model.AppointmentStatus">
                @foreach (AppointmentStatus status in Enum.GetValues(typeof(AppointmentStatus)))
                {
                    <MudSelectItem Value="@((int)status)">
                        <MudChip Class="ma-0" Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[status]};")">
                            @status.GetDisplayName()
                        </MudChip>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudCard Elevation="2" Class="mt-3 mb-3">
                <MudCardContent>
                    <MudStack Row="true" Class="mb-3">
                        <MudTextField T="string" Label="Цель визита" Variant="Variant.Outlined" @bind-Value="_model.Purpose"/>
                        <MudTextField ReadOnly="true" T="string" Label="Ветеринар" Variant="Variant.Outlined" Value="@_model.Employee.Name"/>
                    </MudStack>
                    <MudTextField T="string" Label="Анамнез" Lines="3" FullWidth="true" Variant="Variant.Outlined" @bind-Value="_model.Anamnesis" Class="mb-3"/>
                    <MudTextField T="string" Label="Осмотр" Lines="3" FullWidth="true" Variant="Variant.Outlined" @bind-Value="_model.Information"/>
                </MudCardContent>
            </MudCard>

            <MudCard Elevation="2" Class="mt-3 mb-3">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Диагноз</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Row="true" Spacing="3" Justify="Justify.FlexStart" Class="d-flex flex-wrap">
                        <MudTextField Required="true" RequiredError="Обязательное поле" T="string" Variant="Variant.Outlined" Label="Наименование" @bind-Value="_diagnosis.Name"/>
                        <MudSelect Required="true" RequiredError="Обязательное поле" T="int" Variant="Variant.Outlined" Label="Результат" @bind-Value="_diagnosis.Result">
                            @foreach (DiagnosisResult result in Enum.GetValues(typeof(DiagnosisResult)))
                            {
                                <MudSelectItem Value="@((int)result)">
                                    <MudChip Class="ma-0">
                                        @result.GetDisplayName()
                                    </MudChip>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                    <MudTextField Required="true" RequiredError="Обязательное поле" T="string" Label="Описание" Lines="3" FullWidth="true" Variant="Variant.Outlined" Class="mt-3"
                                  @bind-Value="_diagnosis.Description"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Disabled="@(string.IsNullOrWhiteSpace(_diagnosis.Name)
                                           || string.IsNullOrWhiteSpace(_diagnosis.Description))" 
                               Variant="Variant.Filled" Color="Color.Secondary" Class="mt-3" OnClick="@(async () => await SaveDiagnosis())">Сохранить диагноз</MudButton>
                </MudCardActions>
            </MudCard>

            <MudDataGrid Striped="true" T="Diagnosis" Items="_diagnoses" SortMode="SortMode.Multiple" QuickFilter="@QuickFilter">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Диагнозы</MudText>
                    <MudSpacer/>
                    <MudTextField @bind-Value="_searchString" Placeholder="Поиск" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Name" Title="Наименование"/>
                    <PropertyColumn Property="x => x.Description" Title="Описание"/>
                    <PropertyColumn Property="x => x.Date" Title="Дата изменения"/>
                    <PropertyColumn Property="x => x.Result" Title="Результат"/>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row Class="d-flex flex-wrap">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await DeleteDiagnosis(context.Item.Id))"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await EditDiagnosis(context.Item))"></MudIconButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Рекомендации" Icon="@Icons.Material.Filled.Recommend">
            <MudCard>
                <MudCardContent>
                    <MudTextField Variant="Variant.Outlined" Label="Рекомендации" Placeholder="Особые примечения по уходу"
                                                  @bind-Value="@_model.Recommendations" Lines="4"/>
                </MudCardContent>
            </MudCard>
        </MudTabPanel>
        <MudTabPanel Text="Услуги" Icon="@Icons.Material.Filled.Workspaces"></MudTabPanel>
    </MudTabs>
    <MudCardActions>
        <MudStack Style="position: fixed; right: 0; bottom: 0; padding: 10px; width: 100vw" Row Justify="Justify.FlexEnd">
            <MudButton OnClick="@(async () => await Save())" Variant="Variant.Filled" Color="Color.Secondary">Сохранить</MudButton>
            <MudIconButton OnClick="@Close" Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled" Color="Color.Error"/>
        </MudStack>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public EventCallback<Models.Appointment.AppointmentTable> AppointmentSelect { get; set; }

    [Parameter]
    public Models.Appointment.AppointmentTable AppointmentTable { get; set; } = null!;

    private Models.Appointment.Appointment? _model;
    private List<Diagnosis> _diagnoses = null!;
    private string? _searchString;
    private bool _isLoaded;
    private Diagnosis _diagnosis = new();

    protected override async Task OnInitializedAsync()
    {
        var appointment = await AppointmentService.GetAppointment(AppointmentTable.Id);
        if (appointment is null)
        {
            _model = new();
            return;
        }
        _model = appointment;

        _diagnoses = await AppointmentService.GetAppointmentDiagnoses(_model.Id) ?? new List<Diagnosis>();
        _isLoaded = true;
        await base.OnInitializedAsync();
    }

    private void Close()
    {
        AppointmentSelect.InvokeAsync(null);
    }

    private Func<Diagnosis, bool> QuickFilter => x => string.IsNullOrWhiteSpace(_searchString)
                                                      || x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);

    private async Task SaveDiagnosis()
    {
        if (_model is null)
            return;
        _diagnosis.Date = DateOnly.FromDateTime(DateTime.Now);
        _diagnosis.AppointmentId = _model.Id;
        var result = await DiagnosisService.SaveDiagnosis(_diagnosis);
        if (result.IsSuccess)
        {
            Snackbar.Add("Успешно!", Severity.Success);
            _diagnosis = new Diagnosis();
            _diagnoses = await AppointmentService.GetAppointmentDiagnoses(_model.Id) ?? new List<Diagnosis>();
            return;
        }
        Snackbar.Add(result.Message, Severity.Error);
    }

    private async Task DeleteDiagnosis(int diagnosisId)
    {
        if (_model is null)
            return;
        var result = await DiagnosisService.DeleteDiagnosis(diagnosisId);
        if (result.IsSuccess)
        {
            Snackbar.Add("Успешно!", Severity.Success);
            _diagnosis = new Diagnosis();
            _diagnoses = await AppointmentService.GetAppointmentDiagnoses(_model.Id) ?? new List<Diagnosis>();
            return;
        }
        Snackbar.Add(result.Message, Severity.Error);
        _diagnoses = await AppointmentService.GetAppointmentDiagnoses(_model.Id) ?? new List<Diagnosis>();
    }

    private async Task Save()
    {
        if (_model is null)
            return;
        _model.ChangeDate = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Utc);
        var result = await AppointmentService.SaveAppointment(_model);
        if (result.IsSuccess)
        {
            Snackbar.Add("Успешно", Severity.Success);
            return;
        }
        Snackbar.Add(result.Message, Severity.Error);
    }

    private async Task EditDiagnosis(Diagnosis diagnosis)
    {
        _diagnosis = diagnosis;
        await InvokeAsync(StateHasChanged);
    }

}