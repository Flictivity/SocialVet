@using SoVet.BlazorWebClient.Extensions
@using SoVet.BlazorWebClient.Models.Appointment
@using SoVet.BlazorWebClient.Services.Impl
@using SoVet.BlazorWebClient.Shared.Windows
@inject IDialogService DialogService;
@inject IAppointmentService AppointmentService;
@inject ISnackbar Snackbar;
@inject IDiagnosisService DiagnosisService;
@inject IFacilityService FacilityService;

@if (!_isLoaded)
{
    <MudProgressLinear/>
    return;
}

@if (_model is null)
{
    <MudAlert Severity="Severity.Info" Class="mt-3">Не удалось загрузить информацию о приеме...</MudAlert>
    return;
}

<MudCard Class="pa-4">
    <MudTabs Rounded="true">
        <MudTabPanel Text="Лист осмотра" Icon="@Icons.Material.Filled.ViewList">
            <MudGrid>
                <MudItem xs="12" md="12" lg="5">
                    <MudGrid>
                        <MudItem xs="12" md="12" lg="12">
                            <MudSelect T="int" Label="Статус" Variant="Variant.Outlined" Class="pa-0 mt-3" @bind-Value="_model.AppointmentStatus">
                                @foreach (AppointmentStatus status in Enum.GetValues(typeof(AppointmentStatus)))
                                {
                                    <MudSelectItem Value="@((int)status)">
                                        <MudChip Class="ma-0" Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[status]};")">
                                            @status.GetDisplayName()
                                        </MudChip>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                            <MudCard Elevation="2" Class="mt-3">
                                <MudCardContent>
                                    <MudStack Row="true" Class="mb-3">
                                        <MudTextField T="string" Label="Цель визита" Variant="Variant.Outlined" @bind-Value="_model.Purpose"/>
                                        <MudTextField ReadOnly="true" T="string" Label="Ветеринар" Variant="Variant.Outlined" Value="@_model.Employee.Name"/>
                                    </MudStack>
                                    <MudTextField T="string" Label="Анамнез" Lines="3" FullWidth="true" Variant="Variant.Outlined" @bind-Value="_model.Anamnesis" Class="mb-3"/>
                                    <MudTextField T="string" Label="Осмотр" Lines="3" FullWidth="true" Variant="Variant.Outlined" @bind-Value="_model.Information"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" md="12" lg="12">
                            <MudCard Elevation="2">
                                <MudCardHeader>
                                    <MudText Typo="Typo.h6">Диагноз</MudText>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudStack Row="true" Spacing="2">
                                        <MudAutocomplete Required="true" Variant="Variant.Outlined" T="Diagnosis"
                                                         @bind-Value="@(_appointmentDiagnosis.Diagnosis)" SearchFunc="@SearchDiagnosis" Label="Диагноз"
                                                         FullWidth="true" ToStringFunc="@(e => e is null ? null : e.Name)"
                                                         Clearable="true" OnClearButtonClick="@(() => { _appointmentDiagnosis = new(); })"/>
                                        @if (_appointmentDiagnosis.Diagnosis is null)
                                        {
                                            <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" OnClick="@(async () => await OpenDiagnosisWindow(new Diagnosis(), false))"/>
                                        }
                                        else
                                        {
                                            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" OnClick="@(async () => await OpenDiagnosisWindow(_appointmentDiagnosis.Diagnosis,true))"/>
                                        }
                                    </MudStack>
                                    <MudSelect Class="mt-3" Disabled="@(_appointmentDiagnosis?.Diagnosis is null)" Required="true" RequiredError="Обязательное поле" T="int" Variant="Variant.Outlined" Label="Результат" @bind-Value="_appointmentDiagnosis.Result">
                                        @foreach (DiagnosisResult result in Enum.GetValues(typeof(DiagnosisResult)))
                                        {
                                            <MudSelectItem Value="@((int)result)">
                                                <MudChip Class="ma-0">
                                                    @result.GetDisplayName()
                                                </MudChip>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>

                                    @if (_appointmentDiagnosis!.Diagnosis is not null)
                                    {
                                        <MudTextField T="string" ReadOnly="true" Label="Описание" Lines="4" FullWidth="true" Variant="Variant.Outlined" Class="mt-3"
                                                      @bind-Value="@(_appointmentDiagnosis.Diagnosis.Description)"/>
                                    }
                                    else
                                    {
                                        <MudTextField T="string" ReadOnly="true" Label="Описание" Lines="4" FullWidth="true" Variant="Variant.Outlined" Class="mt-3"/>
                                    }
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Disabled="@(_appointmentDiagnosis.Diagnosis is null)"
                                               Variant="Variant.Filled" Color="Color.Secondary" Class="mt-3" OnClick="@(async () => await SaveAppointmentDiagnosis())">
                                        Сохранить диагноз
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12" md="12" lg="7">
                    <MudDataGrid Striped="true" T="AppointmentDiagnoses" Items="_appointmentDiagnoses" SortMode="SortMode.Multiple" QuickFilter="@DiagnosisQuickFilter">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Диагнозы</MudText>
                            <MudSpacer/>
                            <MudTextField @bind-Value="_diagnosisSearchString" Placeholder="Поиск" Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                            </MudTextField>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.Diagnosis.Name" Title="Наименование"/>
                            <PropertyColumn Property="x => x.EditDate" Title="Дата изменения"/>
                            <TemplateColumn Title="Результат">
                                <CellTemplate>
                                    @if (context.Item.Result > -1)
                                    {
                                        var result = (DiagnosisResult)context.Item.Result;
                                        <MudChip>@result.GetDisplayName()</MudChip>
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn>
                                <CellTemplate>
                                    <MudStack Row Class="d-flex flex-wrap">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await DeleteAppointmentDiagnosis(context.Item.Id))"></MudIconButton>
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await EditAppointmentDiagnosis(context.Item))"></MudIconButton>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudItem>
            </MudGrid>


        </MudTabPanel>
        <MudTabPanel Text="Рекомендации" Icon="@Icons.Material.Filled.Recommend">
            <MudCard>
                <MudCardContent>
                    <MudTextField Variant="Variant.Outlined" Label="Рекомендации" Placeholder="Особые примечения по уходу"
                                  @bind-Value="@_model.Recommendations" Lines="4"/>
                </MudCardContent>
            </MudCard>
        </MudTabPanel>
        <MudTabPanel Text="Услуги" Icon="@Icons.Material.Filled.Workspaces">
            <MudCard Elevation="2" Class="mt-3 mb-3">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Услуга</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudSelect Required="true" ToStringFunc="@(x => x.Name)" RequiredError="Обязательное поле" T="Facility" Variant="Variant.Outlined" Label="Услуга" @bind-Value="_appointmentFacility.Facility">
                        @foreach (Facility facility in _facilities)
                        {
                            <MudSelectItem Value="@(facility)"/>
                        }
                    </MudSelect>
                    <MudNumericField Min="1" Required="true" RequiredError="Обязательное поле" Label="Количество" Lines="3" FullWidth="true" Variant="Variant.Outlined" Class="mt-3"
                                     @bind-Value="_appointmentFacility.Count"/>
                    <MudNumericField Min="0" Required="true" RequiredError="Обязательное поле" Label="Скидка (%)" Lines="3" FullWidth="true" Variant="Variant.Outlined" Class="mt-3"
                                     @bind-Value="_appointmentFacility.Discount"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Disabled="@(_appointmentFacility.Facility is null)"
                               Variant="Variant.Filled" Color="Color.Secondary" Class="mt-3" OnClick="@(async () => await SaveFacility())">
                        Сохранить услугу
                    </MudButton>
                </MudCardActions>
            </MudCard>

            <MudDataGrid Striped="true" T="AppointmentFacility" Items="_appointmentFacilities" SortMode="SortMode.Multiple" QuickFilter="@FacilityQuickFilter">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Услуги</MudText>
                    <MudSpacer/>
                    <MudTextField @bind-Value="_facilitySearchString" Placeholder="Поиск" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Facility.Name" Title="Наименование">
                        <FooterTemplate>
                            <MudText>
                                <b>Итого</b>
                            </MudText>
                        </FooterTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Count" Title="Количество" AggregateDefinition="_sumAggregator"/>
                    <PropertyColumn Property="x => x.Discount" Title="Скидка (%)"/>
                    <PropertyColumn Property="x => x.Sum" Title="Итоговая стоимость" AggregateDefinition="_sumAggregator"/>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row Class="d-flex flex-wrap">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await DeleteFacility(context.Item.Id))"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await EditFacility(context.Item))"></MudIconButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
    </MudTabs>
    <MudCardActions>
        <MudStack Style="position: fixed; right: 0; bottom: 0; padding: 10px; width: 100vw" Row Justify="Justify.FlexEnd">
            <MudButton OnClick="@(async () => await Save())" Variant="Variant.Filled" Color="Color.Secondary">Сохранить</MudButton>
            <MudIconButton OnClick="@Close" Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled" Color="Color.Error"/>
        </MudStack>
    </MudCardActions>
</MudCard>

@code {

    #region Properties

    [Parameter]
    public EventCallback<AppointmentTable> AppointmentSelect { get; set; }

    [Parameter]
    public AppointmentTable AppointmentTable { get; set; } = null!;

    private string _empty = string.Empty;
    private Models.Appointment.Appointment? _model;
    private bool _isLoaded;

    private string? _diagnosisSearchString;
    private AppointmentDiagnoses _appointmentDiagnosis = new();
    private List<Diagnosis> _diagnoses = new();
    private List<AppointmentDiagnoses> _appointmentDiagnoses = null!;

    private string? _facilitySearchString;
    private AppointmentFacility _appointmentFacility = new();
    private List<Facility> _facilities = new();
    private List<AppointmentFacility> _appointmentFacilities = null!;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        var appointment = await AppointmentService.GetAppointment(AppointmentTable.Id);
        if (appointment is null)
        {
            _model = new();
            return;
        }
        _model = appointment;

        _appointmentDiagnoses = await AppointmentService.GetAppointmentDiagnoses(_model.Id) ?? new List<AppointmentDiagnoses>();
        _appointmentFacilities = await AppointmentService.GetAppointmentFacilities(_model.Id) ?? new List<AppointmentFacility>();

        _facilities = await FacilityService.GetFacilities() ?? new List<Facility>();
        _diagnoses = (await DiagnosisService.GetDiagnoses() ?? new List<Diagnosis>())
            .Where(x => _appointmentDiagnoses.FirstOrDefault(z => z.Diagnosis!.Id == x.Id) is null).ToList();

        _isLoaded = true;
        await base.OnInitializedAsync();
    }

    private Func<AppointmentDiagnoses, bool> DiagnosisQuickFilter => x => string.IsNullOrWhiteSpace(_diagnosisSearchString)
                                                                          || (bool)x.Diagnosis?.Name.Contains(_diagnosisSearchString, StringComparison.OrdinalIgnoreCase);

    private Func<AppointmentFacility, bool> FacilityQuickFilter => x => string.IsNullOrWhiteSpace(_diagnosisSearchString)
                                                                        || x.Facility!.Name.Contains(_diagnosisSearchString, StringComparison.OrdinalIgnoreCase);

    #region Diagnosis

    private async Task OpenDiagnosisWindow(Diagnosis diagnosis, bool isEdit)
    {
        var options = new DialogOptions
        {
            Position = DialogPosition.Center, CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true
        };

        var parameters = new DialogParameters
        {
            { "Model", diagnosis },
            { "IsEdit", isEdit }
        };

        var dialog = await DialogService.ShowAsync<DiagnosisWindow>("Диагноз", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Успешно", Severity.Success);
            _diagnoses = _diagnoses = (await DiagnosisService.GetDiagnoses() ?? new List<Diagnosis>())
                .Where(x => _appointmentDiagnoses.FirstOrDefault(z => z.Diagnosis!.Id == x.Id) is null).ToList();
        }
    }
    
    private async Task EditAppointmentDiagnosis(AppointmentDiagnoses appointmentDiagnosis)
    {
        _appointmentDiagnosis = appointmentDiagnosis;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task SaveAppointmentDiagnosis()
    {
        if (_model is null)
            return;
        _appointmentDiagnosis.EditDate = DateOnly.FromDateTime(DateTime.Now);
        _appointmentDiagnosis.AppointmentId = _model.Id;
        var result = await DiagnosisService.SaveDiagnosisInAppointment(_appointmentDiagnosis);
        if (result.IsSuccess)
        {
            Snackbar.Add("Успешно!", Severity.Success);
            _appointmentDiagnosis = new AppointmentDiagnoses();
            _appointmentDiagnoses = await AppointmentService.GetAppointmentDiagnoses(_model.Id) ?? new List<AppointmentDiagnoses>();
            return;
        }
        Snackbar.Add(result.Message, Severity.Error);
    }
    
    private async Task DeleteAppointmentDiagnosis(int appointmentDiagnosisId)
    {
        if (_model is null)
            return;
        var result = await DiagnosisService.DeleteDiagnosisInAppointment(appointmentDiagnosisId);
        if (result.IsSuccess)
        {
            Snackbar.Add("Успешно!", Severity.Success);
            _appointmentDiagnosis = new AppointmentDiagnoses();
            _appointmentDiagnoses = await AppointmentService.GetAppointmentDiagnoses(_model.Id) ?? new List<AppointmentDiagnoses>();
            return;
        }
        Snackbar.Add(result.Message, Severity.Error);
        _appointmentDiagnoses = await AppointmentService.GetAppointmentDiagnoses(_model.Id) ?? new List<AppointmentDiagnoses>();
    }


    private Task<IEnumerable<Diagnosis>> SearchDiagnosis(string value)
    {
        return Task.FromResult(string.IsNullOrEmpty(value)
            ? _diagnoses
            : _diagnoses.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    #endregion

    #region Facility

    private async Task DeleteFacility(int facilityId)
    {
        if (_model is null)
            return;
        var result = await FacilityService.DeleteFacilityInAppointment(facilityId);
        if (result.IsSuccess)
        {
            Snackbar.Add("Успешно!", Severity.Success);
            _appointmentFacility = new AppointmentFacility();
            _appointmentFacilities = await AppointmentService.GetAppointmentFacilities(_model.Id) ?? new List<AppointmentFacility>();
            return;
        }
        Snackbar.Add(result.Message, Severity.Error);
        _appointmentFacilities = await AppointmentService.GetAppointmentFacilities(_model.Id) ?? new List<AppointmentFacility>();
    }
    
    private async Task EditFacility(AppointmentFacility appointmentFacility)
    {
        _appointmentFacility = appointmentFacility;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveFacility()
    {
        if (_model is null)
            return;
        _appointmentFacility.AppointmentId = _model.Id;
        var result = await FacilityService.SaveFacilityInAppointment(_appointmentFacility);
        if (result.IsSuccess)
        {
            Snackbar.Add("Успешно!", Severity.Success);
            _appointmentFacility = new AppointmentFacility();
            _appointmentFacilities = await AppointmentService.GetAppointmentFacilities(_model.Id) ?? new List<AppointmentFacility>();
            return;
        }
        Snackbar.Add(result.Message, Severity.Error);
    }

    #endregion
    
    private async Task Save()
    {
        if (_model is null)
            return;
        _model.ChangeDate = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Utc);
        var result = await AppointmentService.SaveAppointment(_model);
        if (result.IsSuccess)
        {
            Snackbar.Add("Успешно", Severity.Success);
            return;
        }
        Snackbar.Add(result.Message, Severity.Error);
    }
    
    private void Close()
    {
        AppointmentSelect.InvokeAsync(null);
    }
    
    AggregateDefinition<AppointmentFacility> _sumAggregator = new()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "{value}"
    };
}