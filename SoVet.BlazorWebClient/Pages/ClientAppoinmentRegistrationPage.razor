@page "/registrate-to-appointment"
@using SoVet.BlazorWebClient.Services
@using SoVet.BlazorWebClient.Models.Registration

@inject IRegistrationService RegistrationService;

<PageTitle>Запись на прием</PageTitle>

<MudGrid Class="d-flex align-center justify-center" Style="height:90vh;">
    <MudItem xs="12" sm="6">
        <MudImage Elevation="7" Src="images/close-up-on-veterinarian-taking-care-of-dog.jpg" Alt="Doc" Class="rounded-lg" Fluid="true"></MudImage>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudSelect T="int" Variant="Variant.Outlined" Label="Врач">
            <MudSelectItem T="int" Value="1">Ivanov</MudSelectItem>
        </MudSelect>

        <MudDatePicker Class="mt-5" @bind-Date="_date" Variant="Variant.Outlined" Label="Дата посещения"></MudDatePicker>
        @if (_list is null)
        {
            <MudProgressLinear/>
            return;
        }
        @if (_list.Count == 0)
        {
            <MudAlert Severity="Severity.Info" Class="mt-3">На выбранное время нет свободных записей</MudAlert>
            return;
        }
        <MudGrid Class="mt-3" Justify="Justify.FlexStart">
            @foreach (var time in _list)
            {
                <MudItem>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary">
                        @($"{time:hh\\:mm}")
                    </MudButton>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private DateTime? _date;
    private int _employee = 1;

    private List<TimeSpan>? _list = new();

    protected override async Task OnInitializedAsync()
    {
        _list = await RegistrationService.GetAvailableRegistrationTimes(new GetAvailableRegistrationsRequest
        { EmployeeId = _employee, RegistrationDate = _date is null ? DateOnly.FromDateTime(DateTime.Now) : DateOnly.FromDateTime(_date.Value) });
        await base.OnInitializedAsync();
    }

}