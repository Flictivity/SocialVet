@page "/patient/{PatientId:int}/{AppointmentId:int?}"
@using Appointment = SoVet.BlazorWebClient.Models.Appointment.Appointment
@using SoVet.BlazorWebClient.Models.Appointment

@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject IPatientService PatientService;

@attribute [Authorize(Roles=$"{Role.Administrator}, {Role.Veterinarian}")]

<MudTabs Rounded="true" Color="Color.Primary" ActivePanelIndex="_index">
    @if (_patient is not null)
    {
        <MudTabPanel Text="История приемов" Icon="@Icons.Material.Filled.History" OnClick="@(async () => await ChangeTab(0))">
            @if (_appointment is null)
            {
                <Appointments AppointmentSelect="x => _appointment = x" Patient="_patient" AppointmentId="AppointmentId"></Appointments>
            }
            else
            {
                <Appointment AppointmentTable="_appointment" AppointmentSelect="x => _appointment = x"></Appointment>
            }
        </MudTabPanel>
        <MudTabPanel Text="Профиль" Icon="@Icons.Material.Filled.CrueltyFree" OnClick="@(async () => await ChangeTab(1))">
            <PatientInfo Model="_patient"></PatientInfo>
        </MudTabPanel>
    }
</MudTabs>

@code {
    [Parameter]
    public int PatientId { get; set; }
    
    [Parameter]
    public int? AppointmentId { get; set; }
    
    private Patient? _patient;
    
    private AppointmentTable? _appointment;

    private int _index;

    private async Task ChangeTab(int n)
    {
        var result = await DialogService.ShowMessageBox(
            "Осторожно!",
            "Несохраненные данные будут утеряны",
            yesText: "Выход", cancelText: "Отмена");

        var canChange = result is not null;
        if (canChange)
        {
            _index = n;
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _patient = await PatientService.GetPatient(PatientId);
        await base.OnInitializedAsync();
    }
}