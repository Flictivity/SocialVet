@page "/appointment-registrations"
@using Radzen.Blazor
@using SoVet.BlazorWebClient.Shared.Windows
@using DialogOptions = MudBlazor.DialogOptions
@using DialogPosition = MudBlazor.DialogPosition
@using Radzen

@inject IRegistrationService RegistrationService;
@inject IDialogService DialogService;

<PageTitle>Записи</PageTitle>

@if (_registrations?.Count != 0)
{
    <RadzenScheduler @ref=@_scheduler TItem="Registration" Data=@_registrations StartProperty="StartTime" EndProperty="EndTime"
                     TextProperty="ClientName" SelectedIndex="1" TodayText="Сегодня" AppointmentSelect="RegistrationSelect" Style="height: 90vh">
        <RadzenDayView StartTime="@StartTime" EndTime="@EndTime" TimeFormat="H:mm" Text="День" />
        <RadzenWeekView StartTime="@StartTime" EndTime="@EndTime" TimeFormat="H:mm" Text="Неделя" />
    </RadzenScheduler>
}
@code {
    RadzenScheduler<Registration> _scheduler = null!;
    private List<Registration>? _registrations = new();
    
    public static TimeSpan StartTime = new(8, 0, 0);
    public static TimeSpan EndTime = new(23, 0, 0);
    
    
    protected override async Task OnInitializedAsync()
    {
        _registrations = await RegistrationService.GetRegistrations(null);
        await base.OnInitializedAsync();
    }

    private async Task RegistrationSelect(SchedulerAppointmentSelectEventArgs<Registration> args)
    {
        var options = new DialogOptions
        {
            Position = DialogPosition.Center, CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true
        };

        var parameters = new DialogParameters
        {
            { "Model", args.Data }
        };
        
        var dialog = await DialogService.ShowAsync<CreateAppointmentWindow>("Прием", parameters, options);
        var result = await dialog.Result;
    }

}