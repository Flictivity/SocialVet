@page "/patients"

@inject IPatientService PatientService;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;

<PageTitle>Пациенты</PageTitle>

<MudDataGrid @ref="_dataGrid" Striped="true" T="Patient" ServerData="GetServerData">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Кличка"/>
        <PropertyColumn Property="x => x.Age" Title="Возраст (мес.)"/>
        <PropertyColumn Property="x => x.AnimalType.Name" Title="Тип животного"/>
        <PropertyColumn Property="x => x.Client.Name" Title="Владелец"/>
        @if (!_isClient)
        {
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" Color="Color.Secondary" Variant="Variant.Filled" Href="@($"patient/{context.Item.Id}")"/>
                </CellTemplate>
            </TemplateColumn>
        }
    </Columns>
</MudDataGrid>

@code {
    MudDataGrid<Patient> _dataGrid = null!;
    private bool _isClient;

    private async Task<GridData<Patient>> GetServerData(GridState<Patient> state)
    {
        List<Patient>? patients;
        var userIdentity = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (userIdentity.IsInRole(Role.Client))
        {
            _isClient = true;
            var clientId = int.Parse(userIdentity.Claims.First(x => x.Type == UserClaims.ClientId).Value);
            patients = await PatientService.GetPatients(clientId);
        }
        else
        {
            patients = await PatientService.GetPatients();
        }
        patients ??= new List<Patient>();
        return new GridData<Patient> {Items = patients, TotalItems = patients.Count};
    }
}